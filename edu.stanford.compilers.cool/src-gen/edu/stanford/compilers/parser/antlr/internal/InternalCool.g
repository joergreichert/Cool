/*
* generated by Xtext
*/
grammar InternalCool;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.stanford.compilers.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.stanford.compilers.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.stanford.compilers.services.CoolGrammarAccess;

}

@parser::members {

 	private CoolGrammarAccess grammarAccess;
 	
    public InternalCoolParser(TokenStream input, CoolGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected CoolGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getClassesClass_ParserRuleCall_0()); 
	    }
		lv_classes_0_0=ruleClass_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_0_0, 
        		"Class_");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleClass_
entryRuleClass_ returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_Rule()); }
	 iv_ruleClass_=ruleClass_ 
	 { $current=$iv_ruleClass_.current; } 
	 EOF 
;

// Rule Class_
ruleClass_ returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClass_Access().getClassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_Access().getNameSYMBOLParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_Rule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='inherits' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClass_Access().getInheritsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClass_Rule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClass_Access().getParentTypeCrossReference_2_1_0()); 
	}

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClass_Access().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_Access().getFeaturesFeature_ParserRuleCall_4_0()); 
	    }
		lv_features_5_0=ruleFeature_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_Rule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_5_0, 
        		"Feature_");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClass_Access().getRightCurlyBracketKeyword_5());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClass_Access().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleFeature_
entryRuleFeature_ returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeature_Rule()); }
	 iv_ruleFeature_=ruleFeature_ 
	 { $current=$iv_ruleFeature_.current; } 
	 EOF 
;

// Rule Feature_
ruleFeature_ returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeature_Access().getAttrParserRuleCall_0()); 
    }
    this_Attr_0=ruleAttr
    { 
        $current = $this_Attr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeature_Access().getMethodParserRuleCall_1()); 
    }
    this_Method_1=ruleMethod
    { 
        $current = $this_Method_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttr
entryRuleAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrRule()); }
	 iv_ruleAttr=ruleAttr 
	 { $current=$iv_ruleAttr.current; } 
	 EOF 
;

// Rule Attr
ruleAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAttrAccess().getType_declTypeCrossReference_2_0()); 
	}

)
)(	otherlv_3='<-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrAccess().getLessThanSignHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getInitExpressionParserRuleCall_3_1_0()); 
	    }
		lv_init_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_0_0()); 
	    }
		lv_formals_2_0=ruleFormal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"formals",
        		lv_formals_2_0, 
        		"Formal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_1_1_0()); 
	    }
		lv_formals_4_0=ruleFormal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"formals",
        		lv_formals_4_0, 
        		"Formal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getColonKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getReturn_typeTypeCrossReference_5_0()); 
	}

)
)	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getExprExpressionParserRuleCall_7_0()); 
	    }
		lv_expr_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_8());
    }
	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getSemicolonKeyword_9());
    }
)
;





// Entry rule entryRuleFormal
entryRuleFormal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalRule()); }
	 iv_ruleFormal=ruleFormal 
	 { $current=$iv_ruleFormal.current; } 
	 EOF 
;

// Rule Formal
ruleFormal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormalAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getFormalAccess().getType_declTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getCompareExpressionParserRuleCall()); 
    }
    this_CompareExpression_0=ruleCompareExpression
    { 
        $current = $this_CompareExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLoopExpressionParserRuleCall_1()); 
    }
    this_LoopExpression_1=ruleLoopExpression
    { 
        $current = $this_LoopExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_2()); 
    }
    this_BlockExpression_2=ruleBlockExpression
    { 
        $current = $this_BlockExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLetExpressionParserRuleCall_3()); 
    }
    this_LetExpression_3=ruleLetExpression
    { 
        $current = $this_LetExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_4()); 
    }
    this_CaseExpression_4=ruleCaseExpression
    { 
        $current = $this_CaseExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNewExpressionParserRuleCall_5()); 
    }
    this_NewExpression_5=ruleNewExpression
    { 
        $current = $this_NewExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIsvoidExpressionParserRuleCall_6()); 
    }
    this_IsvoidExpression_6=ruleIsvoidExpression
    { 
        $current = $this_IsvoidExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAssignmentExpressionParserRuleCall_7()); 
    }
    this_AssignmentExpression_7=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSelfTypeLiteralParserRuleCall_8()); 
    }
    this_SelfTypeLiteral_8=ruleSelfTypeLiteral
    { 
        $current = $this_SelfTypeLiteral_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefExpressionParserRuleCall_9()); 
    }
    this_IdentifierRefExpression_9=ruleIdentifierRefExpression
    { 
        $current = $this_IdentifierRefExpression_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_10()); 
    }
    this_Literal_10=ruleLiteral
    { 
        $current = $this_Literal_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_11()); 
    }
    this_ParenExpression_11=ruleParenExpression
    { 
        $current = $this_ParenExpression_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNegationExpressionParserRuleCall_12()); 
    }
    this_NegationExpression_12=ruleNegationExpression
    { 
        $current = $this_NegationExpression_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIntegerCompositeExpressionParserRuleCall_13()); 
    }
    this_IntegerCompositeExpression_13=ruleIntegerCompositeExpression
    { 
        $current = $this_IntegerCompositeExpression_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getStaticDispatchExpressionParserRuleCall_14()); 
    }
    this_StaticDispatchExpression_14=ruleStaticDispatchExpression
    { 
        $current = $this_StaticDispatchExpression_14.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelfTypeLiteral
entryRuleSelfTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelfTypeLiteralRule()); }
	 iv_ruleSelfTypeLiteral=ruleSelfTypeLiteral 
	 { $current=$iv_ruleSelfTypeLiteral.current; } 
	 EOF 
;

// Rule SelfTypeLiteral
ruleSelfTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelfTypeLiteralAccess().getSelfTypeLiteralAction_0(),
            $current);
    }
)	otherlv_1='self' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfTypeLiteralAccess().getSelfKeyword_1());
    }
)
;





// Entry rule entryRuleIdentifierRefExpression
entryRuleIdentifierRefExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRefExpressionRule()); }
	 iv_ruleIdentifierRefExpression=ruleIdentifierRefExpression 
	 { $current=$iv_ruleIdentifierRefExpression.current; } 
	 EOF 
;

// Rule IdentifierRefExpression
ruleIdentifierRefExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierRefExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIdentifierRefExpressionAccess().getIdIdentifiableElementCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleParenExpression
entryRuleParenExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenExpressionRule()); }
	 iv_ruleParenExpression=ruleParenExpression 
	 { $current=$iv_ruleParenExpression.current; } 
	 EOF 
;

// Rule ParenExpression
ruleParenExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentExpressionAccess().getLessThanSignHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNegationExpression
entryRuleNegationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationExpressionRule()); }
	 iv_ruleNegationExpression=ruleNegationExpression 
	 { $current=$iv_ruleNegationExpression.current; } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationExpressionAccess().getNotKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerCompositeExpression
entryRuleIntegerCompositeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerCompositeExpressionRule()); }
	 iv_ruleIntegerCompositeExpression=ruleIntegerCompositeExpression 
	 { $current=$iv_ruleIntegerCompositeExpression.current; } 
	 EOF 
;

// Rule IntegerCompositeExpression
ruleIntegerCompositeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntegerCompositeExpressionAccess().getTildeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerCompositeExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerCompositeExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNewExpression
entryRuleNewExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewExpressionRule()); }
	 iv_ruleNewExpression=ruleNewExpression 
	 { $current=$iv_ruleNewExpression.current; } 
	 EOF 
;

// Rule NewExpression
ruleNewExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewExpressionAccess().getNewKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNewExpressionAccess().getType_nameTypeCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleStaticDispatchExpression
entryRuleStaticDispatchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticDispatchExpressionRule()); }
	 iv_ruleStaticDispatchExpression=ruleStaticDispatchExpression 
	 { $current=$iv_ruleStaticDispatchExpression.current; } 
	 EOF 
;

// Rule StaticDispatchExpression
ruleStaticDispatchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStaticDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_0_0()); 
	    }
		lv_ref_0_0=ruleIdentifierRefExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticDispatchExpressionRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"IdentifierRefExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStaticDispatchExpressionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_0_0()); 
	    }
		lv_actual_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticDispatchExpressionRule());
	        }
       		add(
       			$current, 
       			"actual",
        		lv_actual_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStaticDispatchExpressionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_actual_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticDispatchExpressionRule());
	        }
       		add(
       			$current, 
       			"actual",
        		lv_actual_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStaticDispatchExpressionAccess().getRightParenthesisKeyword_3());
    }
(((	'.' 
)=>	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStaticDispatchExpressionAccess().getFullStopKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticDispatchExpressionAccess().getChainStaticDispatchExpressionParserRuleCall_4_1_0()); 
	    }
		lv_chain_7_0=ruleStaticDispatchExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticDispatchExpressionRule());
	        }
       		set(
       			$current, 
       			"chain",
        		lv_chain_7_0, 
        		"StaticDispatchExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionalExpressionAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getPredExpressionParserRuleCall_1_0()); 
	    }
		lv_pred_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getThen_expExpressionParserRuleCall_3_0()); 
	    }
		lv_then_exp_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"then_exp",
        		lv_then_exp_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getElseKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getElse_expExpressionParserRuleCall_4_1_0()); 
	    }
		lv_else_exp_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"else_exp",
        		lv_else_exp_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='fi' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionalExpressionAccess().getFiKeyword_5());
    }
)
;





// Entry rule entryRuleLoopExpression
entryRuleLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopExpressionRule()); }
	 iv_ruleLoopExpression=ruleLoopExpression 
	 { $current=$iv_ruleLoopExpression.current; } 
	 EOF 
;

// Rule LoopExpression
ruleLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopExpressionAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopExpressionAccess().getPredExpressionParserRuleCall_1_0()); 
	    }
		lv_pred_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='loop' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopExpressionAccess().getLoopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopExpressionAccess().getBodyExpressionParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='pool' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopExpressionAccess().getPoolKeyword_4());
    }
)
;





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockExpressionAccess().getBodyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_body_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1());
    }
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleIsvoidExpression
entryRuleIsvoidExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsvoidExpressionRule()); }
	 iv_ruleIsvoidExpression=ruleIsvoidExpression 
	 { $current=$iv_ruleIsvoidExpression.current; } 
	 EOF 
;

// Rule IsvoidExpression
ruleIsvoidExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isvoid' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsvoidExpressionAccess().getIsvoidKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsvoidExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsvoidExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	 iv_ruleLetExpression=ruleLetExpression 
	 { $current=$iv_ruleLetExpression.current; } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_1_0()); 
	    }
		lv_declaration_1_0=ruleLetDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_0, 
        		"LetDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_declaration_3_0=ruleLetDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_3_0, 
        		"LetDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLetExpressionAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getBodyExpressionParserRuleCall_4_0()); 
	    }
		lv_body_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetDeclaration
entryRuleLetDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetDeclarationRule()); }
	 iv_ruleLetDeclaration=ruleLetDeclaration 
	 { $current=$iv_ruleLetDeclaration.current; } 
	 EOF 
;

// Rule LetDeclaration
ruleLetDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclarationAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetDeclarationAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLetDeclarationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLetDeclarationAccess().getType_declTypeCrossReference_2_0()); 
	}

)
)(	otherlv_3='<-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLetDeclarationAccess().getLessThanSignHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclarationAccess().getInitExpressionParserRuleCall_3_1_0()); 
	    }
		lv_init_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclarationRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	 iv_ruleCaseExpression=ruleCaseExpression 
	 { $current=$iv_ruleCaseExpression.current; } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='of' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getOfKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseCaseParserRuleCall_3_0_0()); 
	    }
		lv_case_3_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		add(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseExpressionAccess().getSemicolonKeyword_3_1());
    }
)+	otherlv_5='esac' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCaseExpressionAccess().getEsacKeyword_4());
    }
)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getNameSYMBOLParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaseRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCaseAccess().getType_declTypeCrossReference_2_0()); 
	}

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCaseAccess().getEqualsSignGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompareExpression
entryRuleCompareExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExpressionRule()); }
	 iv_ruleCompareExpression=ruleCompareExpression 
	 { $current=$iv_ruleCompareExpression.current; } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExpressionAccess().getAdditionExpressionParserRuleCall_0()); 
    }
    this_AdditionExpression_0=ruleAdditionExpression
    { 
        $current = $this_AdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleCompareOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getOpCompareOperatorParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCompareOperator
entryRuleCompareOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperatorRule()); } 
	 iv_ruleCompareOperator=ruleCompareOperator 
	 { $current=$iv_ruleCompareOperator.current.getText(); }  
	 EOF 
;

// Rule CompareOperator
ruleCompareOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperatorAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperatorAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperatorAccess().getEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	 iv_ruleAdditionExpression=ruleAdditionExpression 
	 { $current=$iv_ruleAdditionExpression.current; } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); 
    }
    this_MultiplicationExpression_0=ruleMultiplicationExpression
    { 
        $current = $this_MultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'+' 
)
    |((
)	'-' 
)))=>(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getAdditionExpressionLeftAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionExpressionAccess().getPlusSignKeyword_1_0_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getMinusOpAction_1_0_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionExpressionAccess().getHyphenMinusKeyword_1_0_0_1_1());
    }
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	 iv_ruleMultiplicationExpression=ruleMultiplicationExpression 
	 { $current=$iv_ruleMultiplicationExpression.current; } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getDispatchExpressionParserRuleCall_0()); 
    }
    this_DispatchExpression_0=ruleDispatchExpression
    { 
        $current = $this_DispatchExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'*' 
)
    |((
)	'/' 
)))=>(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationExpressionAccess().getAsteriskKeyword_1_0_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getDivOpAction_1_0_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationExpressionAccess().getSolidusKeyword_1_0_0_1_1());
    }
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDispatchExpression
entryRuleDispatchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDispatchExpressionRule()); }
	 iv_ruleDispatchExpression=ruleDispatchExpression 
	 { $current=$iv_ruleDispatchExpression.current; } 
	 EOF 
;

// Rule DispatchExpression
ruleDispatchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDispatchExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(	'@' 
(
(
	RULE_ID

)
))?	'.' 
(
(
ruleIdentifierRefExpression
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDispatchExpressionAccess().getDispatchExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(	otherlv_2='@' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDispatchExpressionAccess().getCommercialAtKeyword_1_0_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDispatchExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDispatchExpressionAccess().getType_nameTypeCrossReference_1_0_0_1_1_0()); 
	}

)
))?	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDispatchExpressionAccess().getFullStopKeyword_1_0_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_1_0_0_3_0()); 
	    }
		lv_ref_5_0=ruleIdentifierRefExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_5_0, 
        		"IdentifierRefExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDispatchExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_actual_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
	        }
       		add(
       			$current, 
       			"actual",
        		lv_actual_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDispatchExpressionAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_actual_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
	        }
       		add(
       			$current, 
       			"actual",
        		lv_actual_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDispatchExpressionAccess().getRightParenthesisKeyword_1_3());
    }
(((	'.' 
)=>	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDispatchExpressionAccess().getFullStopKeyword_1_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchExpressionAccess().getChainStaticDispatchExpressionParserRuleCall_1_4_1_0()); 
	    }
		lv_chain_12_0=ruleStaticDispatchExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
	        }
       		set(
       			$current, 
       			"chain",
        		lv_chain_12_0, 
        		"StaticDispatchExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?)
;









// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); } 
	 iv_ruleBOOLEAN=ruleBOOLEAN 
	 { $current=$iv_ruleBOOLEAN.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSYMBOL
entryRuleSYMBOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSYMBOLRule()); } 
	 iv_ruleSYMBOL=ruleSYMBOL 
	 { $current=$iv_ruleSYMBOL.current.getText(); }  
	 EOF 
;

// Rule SYMBOL
ruleSYMBOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSYMBOLAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw='self' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSYMBOLAccess().getSelfKeyword_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');


