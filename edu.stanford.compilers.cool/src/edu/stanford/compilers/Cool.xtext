grammar edu.stanford.compilers.Cool hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cool "http://www.stanford.edu/compilers/Cool"

Program:	classes+=Class_*;

Class_:
	'class' name=SYMBOL  ('inherits' parent=[Type])? '{'
		features+=Feature_*
		// filename : Symbol
	'}' ';'
;

Feature_:	Attr | Method;
Attr:		name=SYMBOL ':' type_decl=[Type] ('<-' init=Expression)? ';';
Method:		name=SYMBOL '(' (formals+=Formal (',' formals+=Formal)*)? ')' ':' return_type=[Type] '{' expr=Expression '}' ';';
Formal:		name=SYMBOL ':' type_decl=[Type];

//precedence
//.					static dispatch
//@					instance dispatch
//~					Unary integer complement
//isvoid			Unary isvoid
//*  /				Multiplication
//+  -				Addition
//<=    <    =		Comparator
//not				Negation
//<-				Assignment

Expression:
	CompareExpression
;

PrimaryExpression:
	ConditionalExpression |
	LoopExpression |
	BlockExpression |
	LetExpression |
	CaseExpression |
	NewExpression |
	IsvoidExpression |
	AssignmentExpression |	
	SelfTypeLiteral |
	IdentifierRefExpression |
	Literal |
	ParenExpression |
	NegationExpression |
	IntegerCompositeExpression |
	StaticDispatchExpression
;

SelfTypeLiteral:  			{SelfTypeLiteral} 'self';
IdentifierRefExpression:  	id=[IdentifiableElement];
Literal:  					NumberLiteral | StringLiteral | BooleanLiteral;

NumberLiteral:  value=INT;
StringLiteral:  value=STRING;
BooleanLiteral: value=BOOLEAN;

ParenExpression: 			'(' expr=Expression ')';
AssignmentExpression: 		name=SYMBOL '<-' expr=Expression;
NegationExpression:			'not' expr=Expression;
IntegerCompositeExpression:	'~' expr=Expression;
NewExpression: 				'new' type_name=[Type];

StaticDispatchExpression 	returns DispatchExpression:	
	ref=IdentifierRefExpression '(' (actual+=Expression (',' actual+=Expression)*)? ')' 
		(=> '.' chain=StaticDispatchExpression)?
;

ConditionalExpression:		'if' pred=Expression 'then' then_exp=Expression (=> 'else' else_exp=Expression)? 'fi';
LoopExpression:				'while' pred=Expression 'loop' body=Expression 'pool';
BlockExpression: 			{BlockExpression} '{' (body+=Expression ';')* '}';
IsvoidExpression: 			'isvoid' expr=Expression;

LetExpression:				'let' declaration+=LetDeclaration (',' declaration+=LetDeclaration)* 'in' body=Expression;
LetDeclaration:				name=SYMBOL ':' type_decl=[Type] ('<-'  init=Expression)?;

CaseExpression:
	'case'  expr=Expression  'of'
		(case+=Case ';')+
	'esac'
;

Case: name=SYMBOL ':' type_decl=[Type] '=>' expr=Expression;

CompareExpression returns Expression:
	AdditionExpression
	(=> ({CompareExpression.left=current} op=CompareOperator) right=Expression)?
;

CompareOperator: '<' | '<=' | '=';

AdditionExpression returns Expression:
	MultiplicationExpression 
	(=> ({AdditionExpression.left=current} '+' | {Minus.op=current} '-') right=Expression)?
;

MultiplicationExpression returns Expression:
	DispatchExpression 
	(=> ({MultiplicationExpression.left=current} '*' | {Div.op=current} '/') right=Expression)?
;

DispatchExpression returns Expression:
	PrimaryExpression
	(=> ({DispatchExpression.left = current} ('@' type_name=[Type])? '.' ref=IdentifierRefExpression) 
	 '(' (actual+=Expression (',' actual+=Expression)*)? ')' (=> '.' chain=StaticDispatchExpression)?)?
;

Type:  					Class_;
IdentifiableElement: 	Class_ | Feature_ | Formal | LetDeclaration | Case;
	
BOOLEAN:	'true' | 'false';
SYMBOL:		ID | 'self';

terminal ID: 						'^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: 	('0'..'9')+;
terminal ML_COMMENT: 				'(*' -> '*)';
terminal SL_COMMENT: 				'--' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS: 						(' '|'\t'|'\r'|'\n')+;
terminal ANY_OTHER: 				.;

terminal STRING: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
; 


//  -- Expressions
//  constructor no_expr(): Expression;
//  constructor object(name: Symbol): Expression;
//end;