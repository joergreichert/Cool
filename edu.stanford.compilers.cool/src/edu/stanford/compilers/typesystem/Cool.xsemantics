system edu.stanford.compilers.CoolTypesystem 

validatorExtends CoolValidator

import edu.stanford.compilers.cool.BooleanLiteral
import edu.stanford.compilers.cool.Expression
import edu.stanford.compilers.cool.NumberLiteral
import edu.stanford.compilers.cool.StringLiteral
import edu.stanford.compilers.cool.Type
import edu.stanford.compilers.scoping.GlobalTypeAccessor
import edu.stanford.compilers.validation.CoolValidator


judgments {
    type |- Expression expression : output Type
        error "cannot type " + stringRep(expression)
        source expression
    // more judgments later
}

//axiom NumeralLiteral
//    G |- NumberLiteral num : G.intTypeRef
//
//axiom BooleanLiteral
//    G |- BooleanLiteral bool : G.boolTypeRef
//
//axiom StringLiteral
//    G |- StringLiteral str : G.stringTypeRef  