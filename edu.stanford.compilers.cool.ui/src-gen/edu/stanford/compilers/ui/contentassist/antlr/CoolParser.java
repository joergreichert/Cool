/*
* generated by Xtext
*/
package edu.stanford.compilers.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.stanford.compilers.services.CoolGrammarAccess;

public class CoolParser extends AbstractContentAssistParser {
	
	@Inject
	private CoolGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.stanford.compilers.ui.contentassist.antlr.internal.InternalCoolParser createParser() {
		edu.stanford.compilers.ui.contentassist.antlr.internal.InternalCoolParser result = new edu.stanford.compilers.ui.contentassist.antlr.internal.InternalCoolParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeature_Access().getAlternatives(), "rule__Feature___Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getAdditionExpressionAccess().getAlternatives_1_0_0(), "rule__AdditionExpression__Alternatives_1_0_0");
					put(grammarAccess.getMultiplicationExpressionAccess().getAlternatives_1_0_0(), "rule__MultiplicationExpression__Alternatives_1_0_0");
					put(grammarAccess.getIdentifiableElementAccess().getAlternatives(), "rule__IdentifiableElement__Alternatives");
					put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
					put(grammarAccess.getSYMBOLAccess().getAlternatives(), "rule__SYMBOL__Alternatives");
					put(grammarAccess.getClass_Access().getGroup(), "rule__Class___Group__0");
					put(grammarAccess.getClass_Access().getGroup_2(), "rule__Class___Group_2__0");
					put(grammarAccess.getAttrAccess().getGroup(), "rule__Attr__Group__0");
					put(grammarAccess.getAttrAccess().getGroup_3(), "rule__Attr__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_2(), "rule__Method__Group_2__0");
					put(grammarAccess.getMethodAccess().getGroup_2_1(), "rule__Method__Group_2_1__0");
					put(grammarAccess.getFormalAccess().getGroup(), "rule__Formal__Group__0");
					put(grammarAccess.getSelfTypeLiteralAccess().getGroup(), "rule__SelfTypeLiteral__Group__0");
					put(grammarAccess.getParenExpressionAccess().getGroup(), "rule__ParenExpression__Group__0");
					put(grammarAccess.getAssignmentExpressionAccess().getGroup(), "rule__AssignmentExpression__Group__0");
					put(grammarAccess.getNegationExpressionAccess().getGroup(), "rule__NegationExpression__Group__0");
					put(grammarAccess.getIntegerCompositeExpressionAccess().getGroup(), "rule__IntegerCompositeExpression__Group__0");
					put(grammarAccess.getNewExpressionAccess().getGroup(), "rule__NewExpression__Group__0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getGroup(), "rule__StaticDispatchExpression__Group__0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2(), "rule__StaticDispatchExpression__Group_2__0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2_1(), "rule__StaticDispatchExpression__Group_2_1__0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getGroup_4(), "rule__StaticDispatchExpression__Group_4__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup(), "rule__ConditionalExpression__Group__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup_4(), "rule__ConditionalExpression__Group_4__0");
					put(grammarAccess.getLoopExpressionAccess().getGroup(), "rule__LoopExpression__Group__0");
					put(grammarAccess.getBlockExpressionAccess().getGroup(), "rule__BlockExpression__Group__0");
					put(grammarAccess.getBlockExpressionAccess().getGroup_2(), "rule__BlockExpression__Group_2__0");
					put(grammarAccess.getIsvoidExpressionAccess().getGroup(), "rule__IsvoidExpression__Group__0");
					put(grammarAccess.getLetExpressionAccess().getGroup(), "rule__LetExpression__Group__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2(), "rule__LetExpression__Group_2__0");
					put(grammarAccess.getLetDeclarationAccess().getGroup(), "rule__LetDeclaration__Group__0");
					put(grammarAccess.getLetDeclarationAccess().getGroup_3(), "rule__LetDeclaration__Group_3__0");
					put(grammarAccess.getCaseExpressionAccess().getGroup(), "rule__CaseExpression__Group__0");
					put(grammarAccess.getCaseExpressionAccess().getGroup_3(), "rule__CaseExpression__Group_3__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getCompareExpressionAccess().getGroup(), "rule__CompareExpression__Group__0");
					put(grammarAccess.getCompareExpressionAccess().getGroup_1(), "rule__CompareExpression__Group_1__0");
					put(grammarAccess.getCompareExpressionAccess().getGroup_1_0(), "rule__CompareExpression__Group_1_0__0");
					put(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0(), "rule__CompareExpression__Group_1_0_0__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup(), "rule__AdditionExpression__Group__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1(), "rule__AdditionExpression__Group_1__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1_0(), "rule__AdditionExpression__Group_1_0__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_0(), "rule__AdditionExpression__Group_1_0_0_0__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_1(), "rule__AdditionExpression__Group_1_0_0_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup(), "rule__MultiplicationExpression__Group__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0(), "rule__MultiplicationExpression__Group_1_0__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_0(), "rule__MultiplicationExpression__Group_1_0_0_0__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_1(), "rule__MultiplicationExpression__Group_1_0_0_1__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup(), "rule__DispatchExpression__Group__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1(), "rule__DispatchExpression__Group_1__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_0(), "rule__DispatchExpression__Group_1_0__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0(), "rule__DispatchExpression__Group_1_0_0__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0_1(), "rule__DispatchExpression__Group_1_0_0_1__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_2(), "rule__DispatchExpression__Group_1_2__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_2_1(), "rule__DispatchExpression__Group_1_2_1__0");
					put(grammarAccess.getDispatchExpressionAccess().getGroup_1_4(), "rule__DispatchExpression__Group_1_4__0");
					put(grammarAccess.getProgramAccess().getClassesAssignment(), "rule__Program__ClassesAssignment");
					put(grammarAccess.getClass_Access().getNameAssignment_1(), "rule__Class___NameAssignment_1");
					put(grammarAccess.getClass_Access().getParentAssignment_2_1(), "rule__Class___ParentAssignment_2_1");
					put(grammarAccess.getClass_Access().getFeaturesAssignment_4(), "rule__Class___FeaturesAssignment_4");
					put(grammarAccess.getAttrAccess().getNameAssignment_0(), "rule__Attr__NameAssignment_0");
					put(grammarAccess.getAttrAccess().getType_declAssignment_2(), "rule__Attr__Type_declAssignment_2");
					put(grammarAccess.getAttrAccess().getInitAssignment_3_1(), "rule__Attr__InitAssignment_3_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_0(), "rule__Method__NameAssignment_0");
					put(grammarAccess.getMethodAccess().getFormalsAssignment_2_0(), "rule__Method__FormalsAssignment_2_0");
					put(grammarAccess.getMethodAccess().getFormalsAssignment_2_1_1(), "rule__Method__FormalsAssignment_2_1_1");
					put(grammarAccess.getMethodAccess().getReturn_typeAssignment_5(), "rule__Method__Return_typeAssignment_5");
					put(grammarAccess.getMethodAccess().getExprAssignment_7(), "rule__Method__ExprAssignment_7");
					put(grammarAccess.getFormalAccess().getNameAssignment_0(), "rule__Formal__NameAssignment_0");
					put(grammarAccess.getFormalAccess().getType_declAssignment_2(), "rule__Formal__Type_declAssignment_2");
					put(grammarAccess.getIdentifierRefExpressionAccess().getIdAssignment(), "rule__IdentifierRefExpression__IdAssignment");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getParenExpressionAccess().getExprAssignment_1(), "rule__ParenExpression__ExprAssignment_1");
					put(grammarAccess.getAssignmentExpressionAccess().getNameAssignment_0(), "rule__AssignmentExpression__NameAssignment_0");
					put(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_2(), "rule__AssignmentExpression__ExprAssignment_2");
					put(grammarAccess.getNegationExpressionAccess().getExprAssignment_1(), "rule__NegationExpression__ExprAssignment_1");
					put(grammarAccess.getIntegerCompositeExpressionAccess().getExprAssignment_1(), "rule__IntegerCompositeExpression__ExprAssignment_1");
					put(grammarAccess.getNewExpressionAccess().getType_nameAssignment_1(), "rule__NewExpression__Type_nameAssignment_1");
					put(grammarAccess.getStaticDispatchExpressionAccess().getRefAssignment_0(), "rule__StaticDispatchExpression__RefAssignment_0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_0(), "rule__StaticDispatchExpression__ActualAssignment_2_0");
					put(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_1_1(), "rule__StaticDispatchExpression__ActualAssignment_2_1_1");
					put(grammarAccess.getStaticDispatchExpressionAccess().getChainAssignment_4_1(), "rule__StaticDispatchExpression__ChainAssignment_4_1");
					put(grammarAccess.getConditionalExpressionAccess().getPredAssignment_1(), "rule__ConditionalExpression__PredAssignment_1");
					put(grammarAccess.getConditionalExpressionAccess().getThen_expAssignment_3(), "rule__ConditionalExpression__Then_expAssignment_3");
					put(grammarAccess.getConditionalExpressionAccess().getElse_expAssignment_4_1(), "rule__ConditionalExpression__Else_expAssignment_4_1");
					put(grammarAccess.getLoopExpressionAccess().getPredAssignment_1(), "rule__LoopExpression__PredAssignment_1");
					put(grammarAccess.getLoopExpressionAccess().getBodyAssignment_3(), "rule__LoopExpression__BodyAssignment_3");
					put(grammarAccess.getBlockExpressionAccess().getBodyAssignment_2_0(), "rule__BlockExpression__BodyAssignment_2_0");
					put(grammarAccess.getIsvoidExpressionAccess().getExprAssignment_1(), "rule__IsvoidExpression__ExprAssignment_1");
					put(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_1(), "rule__LetExpression__DeclarationAssignment_1");
					put(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_2_1(), "rule__LetExpression__DeclarationAssignment_2_1");
					put(grammarAccess.getLetExpressionAccess().getBodyAssignment_4(), "rule__LetExpression__BodyAssignment_4");
					put(grammarAccess.getLetDeclarationAccess().getNameAssignment_0(), "rule__LetDeclaration__NameAssignment_0");
					put(grammarAccess.getLetDeclarationAccess().getType_declAssignment_2(), "rule__LetDeclaration__Type_declAssignment_2");
					put(grammarAccess.getLetDeclarationAccess().getInitAssignment_3_1(), "rule__LetDeclaration__InitAssignment_3_1");
					put(grammarAccess.getCaseExpressionAccess().getExprAssignment_1(), "rule__CaseExpression__ExprAssignment_1");
					put(grammarAccess.getCaseExpressionAccess().getCaseAssignment_3_0(), "rule__CaseExpression__CaseAssignment_3_0");
					put(grammarAccess.getCaseAccess().getNameAssignment_0(), "rule__Case__NameAssignment_0");
					put(grammarAccess.getCaseAccess().getType_declAssignment_2(), "rule__Case__Type_declAssignment_2");
					put(grammarAccess.getCaseAccess().getExprAssignment_4(), "rule__Case__ExprAssignment_4");
					put(grammarAccess.getCompareExpressionAccess().getOpAssignment_1_0_0_1(), "rule__CompareExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1(), "rule__CompareExpression__RightAssignment_1_1");
					put(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_1(), "rule__AdditionExpression__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_1(), "rule__MultiplicationExpression__RightAssignment_1_1");
					put(grammarAccess.getDispatchExpressionAccess().getType_nameAssignment_1_0_0_1_1(), "rule__DispatchExpression__Type_nameAssignment_1_0_0_1_1");
					put(grammarAccess.getDispatchExpressionAccess().getRefAssignment_1_0_0_3(), "rule__DispatchExpression__RefAssignment_1_0_0_3");
					put(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_0(), "rule__DispatchExpression__ActualAssignment_1_2_0");
					put(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_1_1(), "rule__DispatchExpression__ActualAssignment_1_2_1_1");
					put(grammarAccess.getDispatchExpressionAccess().getChainAssignment_1_4_1(), "rule__DispatchExpression__ChainAssignment_1_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.stanford.compilers.ui.contentassist.antlr.internal.InternalCoolParser typedParser = (edu.stanford.compilers.ui.contentassist.antlr.internal.InternalCoolParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CoolGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CoolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
