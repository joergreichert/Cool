/*
* generated by Xtext
*/
grammar InternalCool;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package edu.stanford.compilers.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.stanford.compilers.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.stanford.compilers.services.CoolGrammarAccess;

}

@parser::members {
 
 	private CoolGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CoolGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getClassesAssignment()); }
(rule__Program__ClassesAssignment)*
{ after(grammarAccess.getProgramAccess().getClassesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass_
entryRuleClass_ 
:
{ before(grammarAccess.getClass_Rule()); }
	 ruleClass_
{ after(grammarAccess.getClass_Rule()); } 
	 EOF 
;

// Rule Class_
ruleClass_
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClass_Access().getGroup()); }
(rule__Class___Group__0)
{ after(grammarAccess.getClass_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature_
entryRuleFeature_ 
:
{ before(grammarAccess.getFeature_Rule()); }
	 ruleFeature_
{ after(grammarAccess.getFeature_Rule()); } 
	 EOF 
;

// Rule Feature_
ruleFeature_
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeature_Access().getAlternatives()); }
(rule__Feature___Alternatives)
{ after(grammarAccess.getFeature_Access().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttr
entryRuleAttr 
:
{ before(grammarAccess.getAttrRule()); }
	 ruleAttr
{ after(grammarAccess.getAttrRule()); } 
	 EOF 
;

// Rule Attr
ruleAttr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttrAccess().getGroup()); }
(rule__Attr__Group__0)
{ after(grammarAccess.getAttrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethod
entryRuleMethod 
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodAccess().getGroup()); }
(rule__Method__Group__0)
{ after(grammarAccess.getMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormal
entryRuleFormal 
:
{ before(grammarAccess.getFormalRule()); }
	 ruleFormal
{ after(grammarAccess.getFormalRule()); } 
	 EOF 
;

// Rule Formal
ruleFormal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalAccess().getGroup()); }
(rule__Formal__Group__0)
{ after(grammarAccess.getFormalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getDispatchExpressionParserRuleCall()); }
	ruleDispatchExpression
{ after(grammarAccess.getExpressionAccess().getDispatchExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelfTypeLiteral
entryRuleSelfTypeLiteral 
:
{ before(grammarAccess.getSelfTypeLiteralRule()); }
	 ruleSelfTypeLiteral
{ after(grammarAccess.getSelfTypeLiteralRule()); } 
	 EOF 
;

// Rule SelfTypeLiteral
ruleSelfTypeLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelfTypeLiteralAccess().getGroup()); }
(rule__SelfTypeLiteral__Group__0)
{ after(grammarAccess.getSelfTypeLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifierRefExpression
entryRuleIdentifierRefExpression 
:
{ before(grammarAccess.getIdentifierRefExpressionRule()); }
	 ruleIdentifierRefExpression
{ after(grammarAccess.getIdentifierRefExpressionRule()); } 
	 EOF 
;

// Rule IdentifierRefExpression
ruleIdentifierRefExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierRefExpressionAccess().getIdAssignment()); }
(rule__IdentifierRefExpression__IdAssignment)
{ after(grammarAccess.getIdentifierRefExpressionAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
(rule__NumberLiteral__ValueAssignment)
{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenExpression
entryRuleParenExpression 
:
{ before(grammarAccess.getParenExpressionRule()); }
	 ruleParenExpression
{ after(grammarAccess.getParenExpressionRule()); } 
	 EOF 
;

// Rule ParenExpression
ruleParenExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenExpressionAccess().getGroup()); }
(rule__ParenExpression__Group__0)
{ after(grammarAccess.getParenExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression 
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
(rule__AssignmentExpression__Group__0)
{ after(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegationExpression
entryRuleNegationExpression 
:
{ before(grammarAccess.getNegationExpressionRule()); }
	 ruleNegationExpression
{ after(grammarAccess.getNegationExpressionRule()); } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationExpressionAccess().getGroup()); }
(rule__NegationExpression__Group__0)
{ after(grammarAccess.getNegationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerComposite
entryRuleIntegerComposite 
:
{ before(grammarAccess.getIntegerCompositeRule()); }
	 ruleIntegerComposite
{ after(grammarAccess.getIntegerCompositeRule()); } 
	 EOF 
;

// Rule IntegerComposite
ruleIntegerComposite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerCompositeAccess().getGroup()); }
(rule__IntegerComposite__Group__0)
{ after(grammarAccess.getIntegerCompositeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDispatchExpression
entryRuleDispatchExpression 
:
{ before(grammarAccess.getDispatchExpressionRule()); }
	 ruleDispatchExpression
{ after(grammarAccess.getDispatchExpressionRule()); } 
	 EOF 
;

// Rule DispatchExpression
ruleDispatchExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup()); }
(rule__DispatchExpression__Group__0)
{ after(grammarAccess.getDispatchExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticDispatchExpression
entryRuleStaticDispatchExpression 
:
{ before(grammarAccess.getStaticDispatchExpressionRule()); }
	 ruleStaticDispatchExpression
{ after(grammarAccess.getStaticDispatchExpressionRule()); } 
	 EOF 
;

// Rule StaticDispatchExpression
ruleStaticDispatchExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getGroup()); }
(rule__StaticDispatchExpression__Group__0)
{ after(grammarAccess.getStaticDispatchExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopExpression
entryRuleLoopExpression 
:
{ before(grammarAccess.getLoopExpressionRule()); }
	 ruleLoopExpression
{ after(grammarAccess.getLoopExpressionRule()); } 
	 EOF 
;

// Rule LoopExpression
ruleLoopExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopExpressionAccess().getGroup()); }
(rule__LoopExpression__Group__0)
{ after(grammarAccess.getLoopExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockExpression
entryRuleBlockExpression 
:
{ before(grammarAccess.getBlockExpressionRule()); }
	 ruleBlockExpression
{ after(grammarAccess.getBlockExpressionRule()); } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup()); }
(rule__BlockExpression__Group__0)
{ after(grammarAccess.getBlockExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpression
entryRuleLetExpression 
:
{ before(grammarAccess.getLetExpressionRule()); }
	 ruleLetExpression
{ after(grammarAccess.getLetExpressionRule()); } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup()); }
(rule__LetExpression__Group__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetDeclaration
entryRuleLetDeclaration 
:
{ before(grammarAccess.getLetDeclarationRule()); }
	 ruleLetDeclaration
{ after(grammarAccess.getLetDeclarationRule()); } 
	 EOF 
;

// Rule LetDeclaration
ruleLetDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetDeclarationAccess().getGroup()); }
(rule__LetDeclaration__Group__0)
{ after(grammarAccess.getLetDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseExpression
entryRuleCaseExpression 
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
(rule__CaseExpression__Group__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCase
entryRuleCase 
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseAccess().getGroup()); }
(rule__Case__Group__0)
{ after(grammarAccess.getCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewExpression
entryRuleNewExpression 
:
{ before(grammarAccess.getNewExpressionRule()); }
	 ruleNewExpression
{ after(grammarAccess.getNewExpressionRule()); } 
	 EOF 
;

// Rule NewExpression
ruleNewExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewExpressionAccess().getGroup()); }
(rule__NewExpression__Group__0)
{ after(grammarAccess.getNewExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIsvoidExpression
entryRuleIsvoidExpression 
:
{ before(grammarAccess.getIsvoidExpressionRule()); }
	 ruleIsvoidExpression
{ after(grammarAccess.getIsvoidExpressionRule()); } 
	 EOF 
;

// Rule IsvoidExpression
ruleIsvoidExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIsvoidExpressionAccess().getGroup()); }
(rule__IsvoidExpression__Group__0)
{ after(grammarAccess.getIsvoidExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareExpression
entryRuleCompareExpression 
:
{ before(grammarAccess.getCompareExpressionRule()); }
	 ruleCompareExpression
{ after(grammarAccess.getCompareExpressionRule()); } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup()); }
(rule__CompareExpression__Group__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperator
entryRuleCompareOperator 
:
{ before(grammarAccess.getCompareOperatorRule()); }
	 ruleCompareOperator
{ after(grammarAccess.getCompareOperatorRule()); } 
	 EOF 
;

// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression 
:
{ before(grammarAccess.getAdditionExpressionRule()); }
	 ruleAdditionExpression
{ after(grammarAccess.getAdditionExpressionRule()); } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup()); }
(rule__AdditionExpression__Group__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression 
:
{ before(grammarAccess.getMultiplicationExpressionRule()); }
	 ruleMultiplicationExpression
{ after(grammarAccess.getMultiplicationExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
(rule__MultiplicationExpression__Group__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN 
:
{ before(grammarAccess.getBOOLEANRule()); }
	 ruleBOOLEAN
{ after(grammarAccess.getBOOLEANRule()); } 
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOOLEANAccess().getAlternatives()); }
(rule__BOOLEAN__Alternatives)
{ after(grammarAccess.getBOOLEANAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSYMBOL
entryRuleSYMBOL 
:
{ before(grammarAccess.getSYMBOLRule()); }
	 ruleSYMBOL
{ after(grammarAccess.getSYMBOLRule()); } 
	 EOF 
;

// Rule SYMBOL
ruleSYMBOL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSYMBOLAccess().getAlternatives()); }
(rule__SYMBOL__Alternatives)
{ after(grammarAccess.getSYMBOLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Feature___Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_Access().getAttrParserRuleCall_0()); }
	ruleAttr
{ after(grammarAccess.getFeature_Access().getAttrParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeature_Access().getMethodParserRuleCall_1()); }
	ruleMethod
{ after(grammarAccess.getFeature_Access().getMethodParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
	ruleConditionalExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLoopExpressionParserRuleCall_1()); }
	ruleLoopExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLoopExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_2()); }
	ruleBlockExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLetExpressionParserRuleCall_3()); }
	ruleLetExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLetExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_4()); }
	ruleCaseExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExpressionParserRuleCall_5()); }
	ruleNewExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getNewExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIsvoidExpressionParserRuleCall_6()); }
	ruleIsvoidExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIsvoidExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getAssignmentExpressionParserRuleCall_7()); }
	ruleAssignmentExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getAssignmentExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSelfTypeLiteralParserRuleCall_8()); }
	ruleSelfTypeLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getSelfTypeLiteralParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefExpressionParserRuleCall_9()); }
	ruleIdentifierRefExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_10()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_11()); }
	ruleParenExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNegationExpressionParserRuleCall_12()); }
	ruleNegationExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getNegationExpressionParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIntegerCompositeParserRuleCall_13()); }
	ruleIntegerComposite
{ after(grammarAccess.getPrimaryExpressionAccess().getIntegerCompositeParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getStaticDispatchExpressionParserRuleCall_14()); }
	ruleStaticDispatchExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getStaticDispatchExpressionParserRuleCall_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getCompareOperatorAccess().getLessThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }

	'<=' 

{ after(grammarAccess.getCompareOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getCompareOperatorAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Alternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_0()); }
(rule__AdditionExpression__Group_1_0_0_0__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_1()); }
(rule__AdditionExpression__Group_1_0_0_1__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Alternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_0()); }
(rule__MultiplicationExpression__Group_1_0_0_0__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_1()); }
(rule__MultiplicationExpression__Group_1_0_0_1__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOOLEAN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SYMBOL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSYMBOLAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getSYMBOLAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSYMBOLAccess().getSelfKeyword_1()); }

	'self' 

{ after(grammarAccess.getSYMBOLAccess().getSelfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Class___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__0__Impl
	rule__Class___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getClass_Access().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__1__Impl
	rule__Class___Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getNameAssignment_1()); }
(rule__Class___NameAssignment_1)
{ after(grammarAccess.getClass_Access().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__2__Impl
	rule__Class___Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getGroup_2()); }
(rule__Class___Group_2__0)?
{ after(grammarAccess.getClass_Access().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__3__Impl
	rule__Class___Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getClass_Access().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__4__Impl
	rule__Class___Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getFeaturesAssignment_4()); }
(rule__Class___FeaturesAssignment_4)*
{ after(grammarAccess.getClass_Access().getFeaturesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__5__Impl
	rule__Class___Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getClass_Access().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getClass_Access().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Class___Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group_2__0__Impl
	rule__Class___Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getInheritsKeyword_2_0()); }

	'inherits' 

{ after(grammarAccess.getClass_Access().getInheritsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class___Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class___Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class___Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getParentAssignment_2_1()); }
(rule__Class___ParentAssignment_2_1)
{ after(grammarAccess.getClass_Access().getParentAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group__0__Impl
	rule__Attr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getNameAssignment_0()); }
(rule__Attr__NameAssignment_0)
{ after(grammarAccess.getAttrAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group__1__Impl
	rule__Attr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getAttrAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group__2__Impl
	rule__Attr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getType_declAssignment_2()); }
(rule__Attr__Type_declAssignment_2)
{ after(grammarAccess.getAttrAccess().getType_declAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group__3__Impl
	rule__Attr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getGroup_3()); }
(rule__Attr__Group_3__0)?
{ after(grammarAccess.getAttrAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAttrAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Attr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group_3__0__Impl
	rule__Attr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getLessThanSignHyphenMinusKeyword_3_0()); }

	'<-' 

{ after(grammarAccess.getAttrAccess().getLessThanSignHyphenMinusKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getInitAssignment_3_1()); }
(rule__Attr__InitAssignment_3_1)
{ after(grammarAccess.getAttrAccess().getInitAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Method__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameAssignment_0()); }
(rule__Method__NameAssignment_0)
{ after(grammarAccess.getMethodAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getGroup_2()); }
(rule__Method__Group_2__0)?
{ after(grammarAccess.getMethodAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getMethodAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getReturn_typeAssignment_5()); }
(rule__Method__Return_typeAssignment_5)
{ after(grammarAccess.getMethodAccess().getReturn_typeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__6__Impl
	rule__Method__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__7__Impl
	rule__Method__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getExprAssignment_7()); }
(rule__Method__ExprAssignment_7)
{ after(grammarAccess.getMethodAccess().getExprAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__8__Impl
	rule__Method__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getSemicolonKeyword_9()); }

	';' 

{ after(grammarAccess.getMethodAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Method__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group_2__0__Impl
	rule__Method__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFormalsAssignment_2_0()); }
(rule__Method__FormalsAssignment_2_0)
{ after(grammarAccess.getMethodAccess().getFormalsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getGroup_2_1()); }
(rule__Method__Group_2_1__0)*
{ after(grammarAccess.getMethodAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Method__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group_2_1__0__Impl
	rule__Method__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getMethodAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFormalsAssignment_2_1_1()); }
(rule__Method__FormalsAssignment_2_1_1)
{ after(grammarAccess.getMethodAccess().getFormalsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Formal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formal__Group__0__Impl
	rule__Formal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalAccess().getNameAssignment_0()); }
(rule__Formal__NameAssignment_0)
{ after(grammarAccess.getFormalAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formal__Group__1__Impl
	rule__Formal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getFormalAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Formal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Formal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalAccess().getType_declAssignment_2()); }
(rule__Formal__Type_declAssignment_2)
{ after(grammarAccess.getFormalAccess().getType_declAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelfTypeLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelfTypeLiteral__Group__0__Impl
	rule__SelfTypeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfTypeLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfTypeLiteralAccess().getSelfTypeLiteralAction_0()); }
(

)
{ after(grammarAccess.getSelfTypeLiteralAccess().getSelfTypeLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelfTypeLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelfTypeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfTypeLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfTypeLiteralAccess().getSelfKeyword_1()); }

	'self' 

{ after(grammarAccess.getSelfTypeLiteralAccess().getSelfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group__0__Impl
	rule__ParenExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group__1__Impl
	rule__ParenExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getExprAssignment_1()); }
(rule__ParenExpression__ExprAssignment_1)
{ after(grammarAccess.getParenExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__0__Impl
	rule__AssignmentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getNameAssignment_0()); }
(rule__AssignmentExpression__NameAssignment_0)
{ after(grammarAccess.getAssignmentExpressionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__1__Impl
	rule__AssignmentExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getLessThanSignHyphenMinusKeyword_1()); }

	'<-' 

{ after(grammarAccess.getAssignmentExpressionAccess().getLessThanSignHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_2()); }
(rule__AssignmentExpression__ExprAssignment_2)
{ after(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group__0__Impl
	rule__NegationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getNotKeyword_0()); }

	'not' 

{ after(grammarAccess.getNegationExpressionAccess().getNotKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getExprAssignment_1()); }
(rule__NegationExpression__ExprAssignment_1)
{ after(grammarAccess.getNegationExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerComposite__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerComposite__Group__0__Impl
	rule__IntegerComposite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerComposite__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerCompositeAccess().getTildeKeyword_0()); }

	'~' 

{ after(grammarAccess.getIntegerCompositeAccess().getTildeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerComposite__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerComposite__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerComposite__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerCompositeAccess().getExprAssignment_1()); }
(rule__IntegerComposite__ExprAssignment_1)
{ after(grammarAccess.getIntegerCompositeAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DispatchExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group__0__Impl
	rule__DispatchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getCompareExpressionParserRuleCall_0()); }
	ruleCompareExpression
{ after(grammarAccess.getDispatchExpressionAccess().getCompareExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1()); }
(rule__DispatchExpression__Group_1__0)?
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DispatchExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1__0__Impl
	rule__DispatchExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1_0()); }
(rule__DispatchExpression__Group_1_0__0)
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1__1__Impl
	rule__DispatchExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getDispatchExpressionAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1__2__Impl
	rule__DispatchExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1_2()); }
(rule__DispatchExpression__Group_1_2__0)?
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getDispatchExpressionAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DispatchExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0()); }
(rule__DispatchExpression__Group_1_0_0__0)
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__DispatchExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0__0__Impl
	rule__DispatchExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getDispatchExpressionExprAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getDispatchExpressionAccess().getDispatchExpressionExprAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0__1__Impl
	rule__DispatchExpression__Group_1_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0_1()); }
(rule__DispatchExpression__Group_1_0_0_1__0)?
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0__2__Impl
	rule__DispatchExpression__Group_1_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getFullStopKeyword_1_0_0_2()); }

	'.' 

{ after(grammarAccess.getDispatchExpressionAccess().getFullStopKeyword_1_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_0_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getRefAssignment_1_0_0_3()); }
(rule__DispatchExpression__RefAssignment_1_0_0_3)
{ after(grammarAccess.getDispatchExpressionAccess().getRefAssignment_1_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DispatchExpression__Group_1_0_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0_1__0__Impl
	rule__DispatchExpression__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getCommercialAtKeyword_1_0_0_1_0()); }

	'@' 

{ after(grammarAccess.getDispatchExpressionAccess().getCommercialAtKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_0_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_0_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getType_nameAssignment_1_0_0_1_1()); }
(rule__DispatchExpression__Type_nameAssignment_1_0_0_1_1)
{ after(grammarAccess.getDispatchExpressionAccess().getType_nameAssignment_1_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DispatchExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_2__0__Impl
	rule__DispatchExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_0()); }
(rule__DispatchExpression__ActualAssignment_1_2_0)
{ after(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getGroup_1_2_1()); }
(rule__DispatchExpression__Group_1_2_1__0)*
{ after(grammarAccess.getDispatchExpressionAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DispatchExpression__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_2_1__0__Impl
	rule__DispatchExpression__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getCommaKeyword_1_2_1_0()); }

	',' 

{ after(grammarAccess.getDispatchExpressionAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DispatchExpression__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DispatchExpression__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_1_1()); }
(rule__DispatchExpression__ActualAssignment_1_2_1_1)
{ after(grammarAccess.getDispatchExpressionAccess().getActualAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StaticDispatchExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group__0__Impl
	rule__StaticDispatchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getRefAssignment_0()); }
(rule__StaticDispatchExpression__RefAssignment_0)
{ after(grammarAccess.getStaticDispatchExpressionAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatchExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group__1__Impl
	rule__StaticDispatchExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getStaticDispatchExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatchExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group__2__Impl
	rule__StaticDispatchExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2()); }
(rule__StaticDispatchExpression__Group_2__0)?
{ after(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatchExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getStaticDispatchExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StaticDispatchExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group_2__0__Impl
	rule__StaticDispatchExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_0()); }
(rule__StaticDispatchExpression__ActualAssignment_2_0)
{ after(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatchExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2_1()); }
(rule__StaticDispatchExpression__Group_2_1__0)*
{ after(grammarAccess.getStaticDispatchExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StaticDispatchExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group_2_1__0__Impl
	rule__StaticDispatchExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getStaticDispatchExpressionAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatchExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticDispatchExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_1_1()); }
(rule__StaticDispatchExpression__ActualAssignment_2_1_1)
{ after(grammarAccess.getStaticDispatchExpressionAccess().getActualAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getPredAssignment_1()); }
(rule__ConditionalExpression__PredAssignment_1)
{ after(grammarAccess.getConditionalExpressionAccess().getPredAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__2__Impl
	rule__ConditionalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getConditionalExpressionAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__3__Impl
	rule__ConditionalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getThen_expAssignment_3()); }
(rule__ConditionalExpression__Then_expAssignment_3)
{ after(grammarAccess.getConditionalExpressionAccess().getThen_expAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__4__Impl
	rule__ConditionalExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_4()); }
(rule__ConditionalExpression__Group_4__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getFiKeyword_5()); }

	'fi' 

{ after(grammarAccess.getConditionalExpressionAccess().getFiKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ConditionalExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_4__0__Impl
	rule__ConditionalExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseKeyword_4_0()); }
(
	'else' 
)
{ after(grammarAccess.getConditionalExpressionAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElse_expAssignment_4_1()); }
(rule__ConditionalExpression__Else_expAssignment_4_1)
{ after(grammarAccess.getConditionalExpressionAccess().getElse_expAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LoopExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopExpression__Group__0__Impl
	rule__LoopExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getLoopExpressionAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopExpression__Group__1__Impl
	rule__LoopExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getPredAssignment_1()); }
(rule__LoopExpression__PredAssignment_1)
{ after(grammarAccess.getLoopExpressionAccess().getPredAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopExpression__Group__2__Impl
	rule__LoopExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getLoopKeyword_2()); }

	'loop' 

{ after(grammarAccess.getLoopExpressionAccess().getLoopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopExpression__Group__3__Impl
	rule__LoopExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getBodyAssignment_3()); }
(rule__LoopExpression__BodyAssignment_3)
{ after(grammarAccess.getLoopExpressionAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getPoolKeyword_4()); }

	'pool' 

{ after(grammarAccess.getLoopExpressionAccess().getPoolKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BlockExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__0__Impl
	rule__BlockExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0()); }
(

)
{ after(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__1__Impl
	rule__BlockExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__2__Impl
	rule__BlockExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
(rule__BlockExpression__Group_2__0)*
{ after(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlockExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__0__Impl
	rule__BlockExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getBodyAssignment_2_0()); }
(rule__BlockExpression__BodyAssignment_2_0)
{ after(grammarAccess.getBlockExpressionAccess().getBodyAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__0__Impl
	rule__LetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }

	'let' 

{ after(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__1__Impl
	rule__LetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_1()); }
(rule__LetExpression__DeclarationAssignment_1)
{ after(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__2__Impl
	rule__LetExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup_2()); }
(rule__LetExpression__Group_2__0)*
{ after(grammarAccess.getLetExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__3__Impl
	rule__LetExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getLetExpressionAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getBodyAssignment_4()); }
(rule__LetExpression__BodyAssignment_4)
{ after(grammarAccess.getLetExpressionAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LetExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_2__0__Impl
	rule__LetExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_2_1()); }
(rule__LetExpression__DeclarationAssignment_2_1)
{ after(grammarAccess.getLetExpressionAccess().getDeclarationAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__0__Impl
	rule__LetDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getNameAssignment_0()); }
(rule__LetDeclaration__NameAssignment_0)
{ after(grammarAccess.getLetDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__1__Impl
	rule__LetDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getLetDeclarationAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__2__Impl
	rule__LetDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getType_declAssignment_2()); }
(rule__LetDeclaration__Type_declAssignment_2)
{ after(grammarAccess.getLetDeclarationAccess().getType_declAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getGroup_3()); }
(rule__LetDeclaration__Group_3__0)?
{ after(grammarAccess.getLetDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LetDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group_3__0__Impl
	rule__LetDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getLessThanSignHyphenMinusKeyword_3_0()); }

	'<-' 

{ after(grammarAccess.getLetDeclarationAccess().getLessThanSignHyphenMinusKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getInitAssignment_3_1()); }
(rule__LetDeclaration__InitAssignment_3_1)
{ after(grammarAccess.getLetDeclarationAccess().getInitAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getCaseExpressionAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getExprAssignment_1()); }
(rule__CaseExpression__ExprAssignment_1)
{ after(grammarAccess.getCaseExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__2__Impl
	rule__CaseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getOfKeyword_2()); }

	'of' 

{ after(grammarAccess.getCaseExpressionAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__3__Impl
	rule__CaseExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
(rule__CaseExpression__Group_3__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
(rule__CaseExpression__Group_3__0)*
{ after(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getEsacKeyword_4()); }

	'esac' 

{ after(grammarAccess.getCaseExpressionAccess().getEsacKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CaseExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group_3__0__Impl
	rule__CaseExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCaseAssignment_3_0()); }
(rule__CaseExpression__CaseAssignment_3_0)
{ after(grammarAccess.getCaseExpressionAccess().getCaseAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getSemicolonKeyword_3_1()); }

	';' 

{ after(grammarAccess.getCaseExpressionAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Case__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__0__Impl
	rule__Case__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getNameAssignment_0()); }
(rule__Case__NameAssignment_0)
{ after(grammarAccess.getCaseAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__1__Impl
	rule__Case__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getCaseAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__2__Impl
	rule__Case__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getType_declAssignment_2()); }
(rule__Case__Type_declAssignment_2)
{ after(grammarAccess.getCaseAccess().getType_declAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__3__Impl
	rule__Case__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getEqualsSignGreaterThanSignKeyword_3()); }

	'=>' 

{ after(grammarAccess.getCaseAccess().getEqualsSignGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getExprAssignment_4()); }
(rule__Case__ExprAssignment_4)
{ after(grammarAccess.getCaseAccess().getExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NewExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpression__Group__0__Impl
	rule__NewExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getNewExpressionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getType_nameAssignment_1()); }
(rule__NewExpression__Type_nameAssignment_1)
{ after(grammarAccess.getNewExpressionAccess().getType_nameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IsvoidExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IsvoidExpression__Group__0__Impl
	rule__IsvoidExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsvoidExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsvoidExpressionAccess().getIsvoidKeyword_0()); }

	'isvoid' 

{ after(grammarAccess.getIsvoidExpressionAccess().getIsvoidKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IsvoidExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IsvoidExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsvoidExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsvoidExpressionAccess().getExprAssignment_1()); }
(rule__IsvoidExpression__ExprAssignment_1)
{ after(grammarAccess.getIsvoidExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__0__Impl
	rule__CompareExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getAdditionExpressionParserRuleCall_0()); }
	ruleAdditionExpression
{ after(grammarAccess.getCompareExpressionAccess().getAdditionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
(rule__CompareExpression__Group_1__0)?
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__0__Impl
	rule__CompareExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
(rule__CompareExpression__Group_1_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
(rule__CompareExpression__RightAssignment_1_1)
{ after(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
(rule__CompareExpression__Group_1_0_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CompareExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__0__Impl
	rule__CompareExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__CompareExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getCompareExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__0__Impl
	rule__AdditionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
	ruleMultiplicationExpression
{ after(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
(rule__AdditionExpression__Group_1__0)?
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__0__Impl
	rule__AdditionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1_0()); }
(rule__AdditionExpression__Group_1_0__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_1()); }
(rule__AdditionExpression__RightAssignment_1_1)
{ after(grammarAccess.getAdditionExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getAlternatives_1_0_0()); }
(rule__AdditionExpression__Alternatives_1_0_0)
{ after(grammarAccess.getAdditionExpressionAccess().getAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AdditionExpression__Group_1_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1_0_0_0__0__Impl
	rule__AdditionExpression__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getPlusOpAction_1_0_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionExpressionAccess().getPlusOpAction_1_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getPlusSignKeyword_1_0_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionExpressionAccess().getPlusSignKeyword_1_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1_0_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1_0_0_1__0__Impl
	rule__AdditionExpression__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1_0_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getMinusOpAction_1_0_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionExpressionAccess().getMinusOpAction_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1_0_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1_0_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getHyphenMinusKeyword_1_0_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionExpressionAccess().getHyphenMinusKeyword_1_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__0__Impl
	rule__MultiplicationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getMultiplicationExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
(rule__MultiplicationExpression__Group_1__0)?
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__0__Impl
	rule__MultiplicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0()); }
(rule__MultiplicationExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_1()); }
(rule__MultiplicationExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getAlternatives_1_0_0()); }
(rule__MultiplicationExpression__Alternatives_1_0_0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplicationExpression__Group_1_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_0_0_0__0__Impl
	rule__MultiplicationExpression__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getMultiOpAction_1_0_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationExpressionAccess().getMultiOpAction_1_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getAsteriskKeyword_1_0_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationExpressionAccess().getAsteriskKeyword_1_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1_0_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_0_0_1__0__Impl
	rule__MultiplicationExpression__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_0_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getDivOpAction_1_0_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationExpressionAccess().getDivOpAction_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1_0_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_0_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getSolidusKeyword_1_0_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationExpressionAccess().getSolidusKeyword_1_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__ClassesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getClassesClass_ParserRuleCall_0()); }
	ruleClass_{ after(grammarAccess.getProgramAccess().getClassesClass_ParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class___NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getNameSYMBOLParserRuleCall_1_0()); }
	ruleSYMBOL{ after(grammarAccess.getClass_Access().getNameSYMBOLParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class___ParentAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getParentTypeCrossReference_2_1_0()); }
(
{ before(grammarAccess.getClass_Access().getParentTypeIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getClass_Access().getParentTypeIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getClass_Access().getParentTypeCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class___FeaturesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_Access().getFeaturesFeature_ParserRuleCall_4_0()); }
	ruleFeature_{ after(grammarAccess.getClass_Access().getFeaturesFeature_ParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getAttrAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__Type_declAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getType_declTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getAttrAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getAttrAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getAttrAccess().getType_declTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr__InitAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrAccess().getInitExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getAttrAccess().getInitExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getMethodAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__FormalsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_0_0()); }
	ruleFormal{ after(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__FormalsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_1_1_0()); }
	ruleFormal{ after(grammarAccess.getMethodAccess().getFormalsFormalParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Return_typeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getReturn_typeTypeCrossReference_5_0()); }
(
{ before(grammarAccess.getMethodAccess().getReturn_typeTypeIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getMethodAccess().getReturn_typeTypeIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getMethodAccess().getReturn_typeTypeCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ExprAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getExprExpressionParserRuleCall_7_0()); }
	ruleExpression{ after(grammarAccess.getMethodAccess().getExprExpressionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formal__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getFormalAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Formal__Type_declAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalAccess().getType_declTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getFormalAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getFormalAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getFormalAccess().getType_declTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierRefExpression__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierRefExpressionAccess().getIdIdentifiableElementCrossReference_0()); }
(
{ before(grammarAccess.getIdentifierRefExpressionAccess().getIdIdentifiableElementIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getIdentifierRefExpressionAccess().getIdIdentifiableElementIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getIdentifierRefExpressionAccess().getIdIdentifiableElementCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); }
	ruleBOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParenExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getAssignmentExpressionAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getNegationExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerComposite__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerCompositeAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIntegerCompositeAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__Type_nameAssignment_1_0_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getType_nameTypeCrossReference_1_0_0_1_1_0()); }
(
{ before(grammarAccess.getDispatchExpressionAccess().getType_nameTypeIDTerminalRuleCall_1_0_0_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDispatchExpressionAccess().getType_nameTypeIDTerminalRuleCall_1_0_0_1_1_0_1()); }
)
{ after(grammarAccess.getDispatchExpressionAccess().getType_nameTypeCrossReference_1_0_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__RefAssignment_1_0_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_1_0_0_3_0()); }
	ruleIdentifierRefExpression{ after(grammarAccess.getDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_1_0_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__ActualAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DispatchExpression__ActualAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getDispatchExpressionAccess().getActualExpressionParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_0_0()); }
	ruleIdentifierRefExpression{ after(grammarAccess.getStaticDispatchExpressionAccess().getRefIdentifierRefExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__ActualAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatchExpression__ActualAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getStaticDispatchExpressionAccess().getActualExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__PredAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getPredExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getPredExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Then_expAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getThen_expExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getThen_expExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Else_expAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElse_expExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getElse_expExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__PredAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getPredExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getLoopExpressionAccess().getPredExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopExpression__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopExpressionAccess().getBodyExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getLoopExpressionAccess().getBodyExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__BodyAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getBodyExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getBlockExpressionAccess().getBodyExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__DeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_1_0()); }
	ruleLetDeclaration{ after(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__DeclarationAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_2_1_0()); }
	ruleLetDeclaration{ after(grammarAccess.getLetExpressionAccess().getDeclarationLetDeclarationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getBodyExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAccess().getBodyExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getLetDeclarationAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Type_declAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getType_declTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getLetDeclarationAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getLetDeclarationAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLetDeclarationAccess().getType_declTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__InitAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getInitExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getLetDeclarationAccess().getInitExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getCaseExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__CaseAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCaseCaseParserRuleCall_3_0_0()); }
	ruleCase{ after(grammarAccess.getCaseExpressionAccess().getCaseCaseParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getNameSYMBOLParserRuleCall_0_0()); }
	ruleSYMBOL{ after(grammarAccess.getCaseAccess().getNameSYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Type_declAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getType_declTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getCaseAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getCaseAccess().getType_declTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getCaseAccess().getType_declTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getCaseAccess().getExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpression__Type_nameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getType_nameTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getNewExpressionAccess().getType_nameTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNewExpressionAccess().getType_nameTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getNewExpressionAccess().getType_nameTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IsvoidExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsvoidExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIsvoidExpressionAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getOpCompareOperatorParserRuleCall_1_0_0_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareExpressionAccess().getOpCompareOperatorParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCompareExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAdditionExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


